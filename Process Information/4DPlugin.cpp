/* --------------------------------------------------------------------------------
 #
 #	4DPlugin.c
 #	source generated by 4D Plugin Wizard
 #	Project : Process Information
 #	author : miyako
 #	2013/11/02
 #
 # --------------------------------------------------------------------------------*/

#include "4DPlugin.h"

#if VERSIONMAC
id activityId;
#endif

void PluginMain(int32_t selector, PA_PluginParameters params)
{
	try
	{
		int32_t pProcNum = selector;
		sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
		PackagePtr pParams = (PackagePtr)params->fParameters;

		switch(pProcNum)
		{
			case 7 :				
			case 8 :
//			case kDeinitPlugin:
//			case kServerDeinitPlugin:				
				CommandDispatcherInMainProcess (pProcNum, params);
				break;
			default:
				CommandDispatcher(pProcNum, pResult, pParams);
				break;
		}

	}
	catch(...)
	{

	}
}

void CommandDispatcherInMainProcess (int32_t pProcNum, PA_PluginParameters params)
{
	switch(pProcNum)
	{	
// --- App Nap (10.9)			
		case 7 :
//		case kDeinitPlugin:
//		case kServerDeinitPlugin:
#if VERSIONMAC
			if(NSFoundationVersionNumber >= NSFoundationVersionNumber10_8)
				PA_RunInMainProcess((PA_RunInMainProcessProcPtr)END_IMPORTANT_ACTIVITY, params);
#endif
			break;	
			
		case 8 :
#if VERSIONMAC
		   if(NSFoundationVersionNumber >= NSFoundationVersionNumber10_8)
				PA_RunInMainProcess((PA_RunInMainProcessProcPtr)BEGIN_IMPORTANT_ACTIVITY, params);		
#endif
			break;	
						
	}
}

void CommandDispatcher (int32_t pProcNum, sLONG_PTR *pResult, PackagePtr pParams)
{
	switch(pProcNum)
	{            
        case kInitPlugin:
		case kServerInitPlugin:
#if VERSIONMAC
            activityId = 0;
#endif
			break;	    
            
// --- Process Information (10.0)

		case 1 :
			PROCESS_GET_ARGUMENTS(pResult, pParams);
			break;

		case 2 :
			PROCESS_Get_name(pResult, pParams);
			break;

		case 3 :
			PROCESS_Get_identifier(pResult, pParams);
			break;

		case 4 :
			PROCESS_SET_NAME(pResult, pParams);
			break;

		case 5 :
			PROCESS_Get_GUID(pResult, pParams);
			break;
			
		case 6 :
			PROCESS_LOG(pResult, pParams);
			break;	

// --- System Information (10.5)

		case 9 :
#if VERSIONMAC
            if(NSFoundationVersionNumber >= NSFoundationVersionNumber10_4)
                SYSTEM_Get_cores(pResult, pParams);
#endif
			break;

		case 10 :
#if VERSIONMAC
            if(NSFoundationVersionNumber >= NSFoundationVersionNumber10_4)
                SYSTEM_Get_cores_active(pResult, pParams);
#endif
			break;

// --- System Information (10.6)

		case 11 :
#if VERSIONMAC
            if(NSFoundationVersionNumber >= NSFoundationVersionNumber10_5)
                SYSTEM_Get_uptime(pResult, pParams);
#endif
			break;

// --- System Information (10.0)

		case 12 :
			SYSTEM_Get_version(pResult, pParams);
			break;

		case 13 :
			SYSTEM_Get_computer_name(pResult, pParams);
			break;

		case 14 :
			SYSTEM_Get_name(pResult, pParams);
			break;

	}
}

// -------------------------- Process Information (10.0) --------------------------

void PROCESS_GET_ARGUMENTS(sLONG_PTR *pResult, PackagePtr pParams)
{
	ARRAY_TEXT Param1;
#if VERSIONWIN
	LPWSTR *szArglist;
	int nArgs, i;
	
	szArglist = CommandLineToArgvW(GetCommandLineW(), &nArgs);
	
	if( NULL != szArglist) {
		
		Param1.setSize(1);
		
		for( i = 0; i < nArgs; ++i)
			Param1.appendUTF16String((const PA_Unichar *)szArglist[i]);
			
		LocalFree(szArglist);	
	}
#else
    NSProcessInfo *processInfo = [NSProcessInfo processInfo]; 
    
    NSArray *arguments = [processInfo arguments];
    
    Param1.setSize(1);
    
    for(unsigned int i = 0;i < [arguments count];++i){
        Param1.appendUTF16String([arguments objectAtIndex:i]);
    }
#endif    
	Param1.toParamAtIndex(pParams, 1);
}

void PROCESS_LOG(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	
	Param1.fromParamAtIndex(pParams, 1);
#if VERSIONWIN	
	wprintf(L"%s", Param1.getUTF16StringPtr());
#else
	NSLog(@"%S", Param1.getUTF16StringPtr());
#endif	
}

void PROCESS_Get_name(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT returnValue;
#if VERSIONMAC
    NSProcessInfo *processInfo = [NSProcessInfo processInfo]; 
    
    NSString *processName = [processInfo processName];   
    
    returnValue.setUTF16String(processName);
#endif    
	returnValue.setReturn(pResult);
}

void PROCESS_Get_identifier(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT returnValue;
#if VERSIONMAC    
    NSProcessInfo *processInfo = [NSProcessInfo processInfo]; 
    
	int processIdentifier = [processInfo processIdentifier];    
    
	returnValue.setIntValue(processIdentifier);
#endif    
	returnValue.setReturn(pResult);
}

void PROCESS_SET_NAME(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
#if VERSIONMAC
	Param1.fromParamAtIndex(pParams, 1);

    NSProcessInfo *processInfo = [NSProcessInfo processInfo]; 
    
    NSString *processName = Param1.copyUTF16String();
    [processInfo setProcessName:processName];
    [processName release];
#endif
}

void PROCESS_Get_GUID(sLONG_PTR *pResult, PackagePtr pParams)
{
#if VERSIONMAC
	C_TEXT returnValue;

    NSProcessInfo *processInfo = [NSProcessInfo processInfo]; 
    
    NSString *globallyUniqueString = [processInfo globallyUniqueString];   
    
    returnValue.setUTF16String(globallyUniqueString);

	returnValue.setReturn(pResult);
#endif
}

// -------------------------------- App Nap (10.9) --------------------------------

void END_IMPORTANT_ACTIVITY(PA_PluginParameters params)
{
#if VERSIONMAC	
    if(activityId){
        [[NSProcessInfo processInfo] endActivity:activityId];
        activityId = 0;    
    };
#endif	
}

void BEGIN_IMPORTANT_ACTIVITY(PA_PluginParameters params)
{
	C_LONGINT Param1;
	C_TEXT Param2;
#if VERSIONMAC

	PackagePtr pParams = (PackagePtr)params->fParameters;
	
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

	NSActivityOptions options = 0;
    
    unsigned int option = Param1.getIntValue();
    
    if(option == 1)
        options = options|NSActivityIdleDisplaySleepDisabled;
    if(option == 2)
        options = options|NSActivityIdleSystemSleepDisabled;
    if(option == 3)
        options = options|NSActivitySuddenTerminationDisabled; 
    if(option == 4)
        options = options|NSActivityAutomaticTerminationDisabled;  
    
    NSString *reason = Param2.copyUTF16String();
    
    if(![reason length])
        reason = @"important activity";
    
    NSProcessInfo *processInfo = [NSProcessInfo processInfo]; 
    
    END_IMPORTANT_ACTIVITY(params);
    
    activityId = [processInfo beginActivityWithOptions:options reason:reason];
    
    [reason release];
#endif	
}

// --------------------------- System Information (10.5) --------------------------

void SYSTEM_Get_cores(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT returnValue;
#if VERSIONMAC
    NSProcessInfo *processInfo = [NSProcessInfo processInfo];    
    
	NSUInteger processorCount = [processInfo processorCount];     

    returnValue.setIntValue(processorCount);
#endif    
	returnValue.setReturn(pResult);
}

void SYSTEM_Get_cores_active(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_LONGINT returnValue;
#if VERSIONMAC
    NSProcessInfo *processInfo = [NSProcessInfo processInfo];    
    
	NSUInteger activeProcessorCount = [processInfo activeProcessorCount]; 
    
    returnValue.setIntValue(activeProcessorCount);
#endif  
	returnValue.setReturn(pResult);
}

// --------------------------- System Information (10.6) --------------------------

void SYSTEM_Get_uptime(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_REAL returnValue;
#if VERSIONMAC
    NSProcessInfo *processInfo = [NSProcessInfo processInfo];    
    
	NSTimeInterval systemUptime = [processInfo systemUptime];

    returnValue.setDoubleValue(systemUptime);
#endif    
	returnValue.setReturn(pResult);
}

// --------------------------- System Information (10.0) --------------------------

void SYSTEM_Get_version(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT returnValue;
#if VERSIONMAC 
    NSProcessInfo *processInfo = [NSProcessInfo processInfo];
    
    NSString *operatingSystemName = [processInfo operatingSystemVersionString];
    
    returnValue.setUTF16String(operatingSystemName);
#endif
	returnValue.setReturn(pResult);
}

void SYSTEM_Get_computer_name(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT returnValue;
#if VERSIONMAC 
    NSProcessInfo *processInfo = [NSProcessInfo processInfo];
    
    NSString *operatingSystemName = [processInfo hostName];
    
    returnValue.setUTF16String(operatingSystemName);
#endif
	returnValue.setReturn(pResult);
}

void SYSTEM_Get_name(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT returnValue;
#if VERSIONMAC    
    NSProcessInfo *processInfo = [NSProcessInfo processInfo];

    NSString *operatingSystemName = [processInfo operatingSystemName];
    
    returnValue.setUTF16String(operatingSystemName);
#endif    
	returnValue.setReturn(pResult);
}

